#1
# 1.Выполните на придуманных Вами примерах (по 2-3 шт. с разными типами данных) основные операции над множествами:
# объединение,
# пересечение,
# разность,
# принадлежность одного множества в другому.
a = set('789654')
b = set('123456')
print(a.union(b))
print(a.intersection(b))
print(a - b)
print(a <= b, '\n')
a = set('asdfg')
b = set('asdfgбвгд')
print(a.union(b))
print(a.intersection(b))
print(a.difference(b))
print(a <= b, '\n')
a = {(1, 1), (2, 2)}
b = {(2, 2), (3, 3)}
print(a.union(b))
print(a.intersection(b))
print(a - b)
print(a <= b)


#2
# 2.Каждый из N школьников некоторой школы знает M языков. Определите, какие языки знают все школьники и языки,
# которые знает хотя бы один из школьников.
union = set()
all = set()
for i in range(int(input('Введите n: '))):
    m = int(input('Введите кол-во языков'))
    a = {input('Введите языки') for j in range(m)}
    all.update(a)
    if i == 1:
        union.update(a)
    else:
        union &= a
print('Знают все: ')
print('\n'.join(sorted(union)))
print('\nЗнает хотя бы один школьник: ')
print('\n'.join(sorted(all)))


#3
# 3.Во входном файле (вы можете читать данные из файла (input.txt) записан текст. Словом считается последовательность
# непробельных символов идущих подряд, слова разделены одним или большим числом пробелов или символами конца строки.
# Определите, сколько различных слов содержится в этом тексте.
f = open("input.txt", "r")
a = []
for i in f.read().split('\n'):
   a += i.split()
print(len(set(a)))


#4
# 4.Даны два словаря: dictionary_1 = {'a': 300, 'b': 400} и dictionary_2 = {'c': 500, 'd': 600}.
# Объедините их в один при помощи встроенных функций языка Python.
dictionary_1 = {'a': 300, 'b': 400}
dictionary_2 = {'c': 500, 'd': 600}
dictionary_1.update(dictionary_2)
print(dictionary_1)

# 5
# 5.Найдите три ключа с самыми высокими значениями в словаре
# my_dict = {'a':500, 'b':5874, 'c': 560, 'd':400, 'e':5874, 'f': 20}.
def maxi(dict):
    mx = -1
    for i in dict:
        mx = max(mx, dict[i])
    return mx


my_dict = {'a': 500, 'b': 5874, 'c': 560, 'd': 400, 'e': 5874, 'f': 20}
for j in range(3):
    for i in my_dict:
        if my_dict[i] == maxi(my_dict):
            print(i, ': ', my_dict.pop(i))
            break


#6
# 6.Создайте словарь, в котором ключами будут числа от 1 до 10, а значениями эти же числа, возведенные в куб.
d = {a: a ** 3 for a in range(11)}
print(d)


# 7
# 7.Даны два списка одинаковой длины. Необходимо создать из них словарь таким образом, чтобы элементы первого
# списка были ключами, а элементы второго — соответственно значениями нашего словаря.
mas1 = ['a', 'b', 'c', 'd', 'e']
mas2 = [1, 2, 3, 4, 5]
d = {}
for i in range(len(mas1)):
    d[mas1[i]] = mas2[i]
print(d)


# 8
# 8.Создайте словарь из строки 'pythonist' следующим образом: в качестве ключей возьмите буквы строки, а значениями
# пусть будут числа, соответствующие количеству вхождений данной буквы в строку.
# Подсчитать, сколько раз в строке встречается каждый символ.
s = 'pythonist'
d = {}
for i in s:
    d[i] = 0
for i in range(len(s)):
    d[s[i]] += 1
print(d)


# 9
# 9.Инвертировать словарь, т.е. поменять ключи со значениями.
d = {'a': 1, 'b': 2, 'c': 3}
new_d = {}
for keys, values in d.items():
    new_d[values] = keys
print(new_d)


# 10
# 10.Создайте словарь, где ключами являются числа, а значениями – строки. Примените к нему метод items(),
# полученный объект dict_items передайте в написанную вами функцию, которая создает и возвращает новый словарь,
# "обратный" исходному, т. е. ключами являются строки, а значениями – числа.
def f(my_dict):
    new_d = {}
    for keys, values in my_dict:
        new_d[values] = keys
    return new_d


d = {1: 'лилия', 2: 'ромашка', 3: 'незабудка', 4: 'ландыш'}
dict_items = d.items()
print(f(dict_items))


# 11
# 11.В стране есть столица и города, каждый имеет уникальное имя. Карта городов и дорог образует дерево с вершиной
# в столице. Жители группируют города по удаленности от столицы, измеряемой в количестве городов на пути до столицы
# (включая столицу, то есть ближайшие города удалены на 1 город, всего минимум 3 уровня вложений городов).
# Столицу же всегда называют столицей. а) Задача: по имени города вывести удаленность от столицы, а также на том же
# расстоянии находится город от столицы. б) Написать функцию, которая принимает некоторые города и выдаёт результат:
# можно ли добраться из 1 города в другой на прямую или только через столицу.
def f(city1, city2):
    for i in cities[city1]:
        if i == city2:
            print("Напрямую")
            break
    else:
        print("Через Столицу")


cities = {"Столица": ["Златоуст", "Сатка", "Бакал", "0"], "Златоуст": ["Столица", "Снежинск", "1"],
          "Сатка": ["Столица", "Бердяуш", "1"], "Бакал": ["Столица", "1"], "Снежинск": ["Златоуст", "2"],
          "Бердяуш": ["Сатка", "2"]}
city = input("Введите город: ")
print("Удаленность от Столицы =  ", cities[city][-1])
for key, value in cities.items():
    if value[-1] == cities[city][-1] and key != city:
        print("Город той же удаленности ", key)
city1 = input("\n\nВведите 1 город: ")
city2 = input("\n\nВведите 2 город: ")
f(city1, city2)


#12
# 12.Создайте словарь, связав его с переменной school, и наполните данными, которые бы отражали количество учащихся
# в разных классах (1а, 1б, 2б, 6а, 7в и т. п.). Внесите изменения в словарь согласно следующему: а) в одном из
# классов изменилось количество учащихся, б) в школе появился новый класс, с) в школе был расформирован (удален)
# другой класс. Вычислите общее количество учащихся в школе.
school = {'1а': 10,
          '1б': 20,
          '2а': 30,
          '2б': 30,
          '3а': 20,
          '3б': 10,
          '7а': 15,
          '7б': 16,
          '7в': 25}
x = input('Введите класс: ')
y = input('Введите новое кол-во учеников')
school[x] = y
x = input('Введите новый класс: ')
y = input('Введите новое кол-во учеников')
school.update({x: y})
x = input('Введите класс для удаления: ')
school.pop(x)
ans = 0
for i in school:
    ans += school[i]
print(ans)


#13
# 13.Банковские счета. Некоторый банк хочет внедрить систему управления счетами клиентов, поддерживающую следующие
# операции: пополнение счета клиента; снятие денег со счета; запрос остатка средств на счете; перевод денег между
# счетами клиентов; начисление процентов всем клиентам. Необходимо реализовать такую систему. Клиенты банка
# идентифицируются именами (уникальная строка, не содержащая пробелов). Первоначально у банка нет ни одного клиента.
# Как только для клиента проводится операция пололнения, снятия или перевода денег, ему заводится счет с нулевым
# балансом. Все дальнейшие операции проводятся только с этим счетом. Сумма на счету может быть как положительной,
# так и отрицательной, при этом всегда является целым числом.
def topUpMoney(key):
   names[key] += int(input("Введите сумму: "))
   print(names)

def takeOffMoney(key):
   names[key] -= int(input("Введите сумму: "))
   print(names)

def watchMoney(key):
   print(names[key])

def transMoney(key, s2):
    sum = int(input('Введите сумму перевода: '))
    names[key] -= sum
    names[s2] += sum
    print(names)

def percents(key):
   names[key] *= int(input("Введите процент: ")) / 100

names = {}
while True:
    s = input('Введите имя клиента: ')
    if s not in names.keys():
        names[s] = 0
    #print(names)
    n = int(input('Введите номер операции:'
                  '\n1 - пополнение счета клиента'
                  '\n2 - снятие денег со счета'
                  '\n3 - запрос остатка средств на счете'
                  '\n4 - перевод денег между счетами клиентов'
                  '\n5 - начисление процентов всем клиентам'))
    if n == 1:
        topUpMoney(s)
    elif n == 2:
        takeOffMoney(s)
    elif n == 3:
        watchMoney(s)
    elif n == 4:
        s2 = input('Введите счет для перевода: ')
        if s2 not in names.keys():
            names[s2] = 0
        transMoney(s, s2)
    elif n == 5:
        percents(s)



#14
# 14.Имеется ряд словарей с пересекающимися ключами (значения - положительные числа). Напишите функцию,
# max_dct(*dicts) которая формирует новый словарь по правилу: если в исходных словарях есть повторяющиеся ключи,
# выбираем среди их значений максимальное и присваиваем этому ключу (например, в словаре_1 есть ключ “а” со значением 5,
# и в словаре_2 есть ключ “а”, но со значением 9. Выбираем максимальное значение, т. е. 9, и присваиваем ключу “а”
# в уже новом словаре). Если ключ не повторяется, то он просто переносится со своим значением в новый словарь (например,
# ключ “с” встретился только у одного словаря, а у других его нет. Следовательно, переносим в новый словарь этот ключ
# вместе с его значением). Сформированный словарь возвращаем.
def max_dct(dict1, dict2):
    d = {}
    for key1 in dict1:
        d.update({key1: dict1[key1]})
        for key2 in dict2:
            if key1 == key2:
                d[key1] = max(dict1[key1], dict2[key2])
    for key1 in dict1:
            if key1 in d:
                continue
            else:
                d.update({key1: dict1[key1]})
    for key2 in dict2:
            if key2 in d:
                continue
            else:
                d.update({key2: dict2[key2]})
    return d


d1 = {1: 11, 2: 33, 3: 10, 4: 10, 5: 2, 6: 90}
d2 = {1: 12, 3: 7, 4: 1, 5: 2, 7: 112}
d3 = max_dct(d1, d2)
print(d3)


# 15
# 15.Создать базу данных на основе словаря, в котором хранится информация по студентам 2-х групп (ФИО, адрес,
# телефон), а также их оценки по 3-м предметам (Алгоритмизация и программирование, Информатика, Физкультура, всего по
# 4 оценки в каждом предмете, для каждого студента). Вывести на печать в виде таблицы оценки студентов групп, среднюю
# успеваемость студентов в группе, среднюю успеваемость по группе в целом. Оформить данные в виде отчета.
d = {'Group1': {'Иванов И.И., Пушкина 7, 89511182870': {"Алгоритмизация и программирование": [5, 5, 5, 5],
                                                        'Информатика': [5, 5, 5, 5], 'Физкультура': [5, 5, 5, 5]},
                'Петров П.П., Калатушкина 8, 89263150621': {"Алгоритмизация и программирование": [5, 4, 3, 5],
                                                            'Информатика': [5, 4, 3, 5], 'Физкультура': [5, 4, 3, 5]},
                'Козлов К.К., Шишкина 9, 89536254120': {"Алгоритмизация и программирование": [5, 4, 5, 5],
                                                        'Информатика': [5, 4, 3, 5], 'Физкультура': [5, 4, 4, 5]}},
     'Group2': {'Макаров Д.Ю., Ленина 10, 89576253120': {"Алгоритмизация и программирование": [3, 4, 3, 5],
                                                         'Информатика': [5, 4, 3, 5], 'Физкультура': [3, 4, 3, 3]},
                'Гайдуков Б.Б., Советская 12, 89021268476 ': {"Алгоритмизация и программирование": [5, 4, 5, 5],
                                                              'Информатика': [5, 5, 5, 5], 'Физкультура': [5, 5, 3, 5]},
                'Хазеева Л.Р., Яруллина 6, 89634671213 ': {"Алгоритмизация и программирование": [5, 4, 3, 5],
                                                           'Информатика': [5, 4, 3, 5], 'Физкультура': [5, 4, 3, 5]}}}

for key in d:
    sr_group = 0
    print(key + ': ')
    for key1 in d[key]:
        sr = 0
        print('\t' + key1 + ': ')
        for key2 in d[key][key1]:
            print('\t\t' + key2 + ': '
                  + str(d[key][key1][key2][0]) + ' '
                  + str(d[key][key1][key2][1]) + ' '
                  + str(d[key][key1][key2][2]) + ' '
                  + str(d[key][key1][key2][3]))
            sr += d[key][key1][key2][0] + d[key][key1][key2][1] + d[key][key1][key2][2] + d[key][key1][key2][3]
            sr_group += d[key][key1][key2][0] + d[key][key1][key2][1] + d[key][key1][key2][2] + d[key][key1][key2][3]
        print('\t\tСредняя успеваемость = ', sr / 12)
    print('**** Средняя успеваемость группы = ', sr_group / (12 * 3), '****')


#16
# 16. Однажды, разбирая старые книги на чердаке, школьник Вася нашёл англо-латинский словарь. Английский он к тому
# времени знал в совершенстве, и его мечтой было изучить латынь. Поэтому попавшийся словарь был как раз кстати.
# К сожалению, для полноценного изучения языка недостаточно только одного словаря: кроме англо-латинского необходим
# латинско-английский. За неимением лучшего он решил сделать второй словарь из первого. Как известно, словарь состоит
# из переводимых слов, к каждому из которых приводится несколько слов-переводов. Для каждого латинского слова,
# встречающегося где-либо в словаре, Вася предлагает найти все его переводы (то есть все английские слова, для которых
# наше латинское встречалось в его списке переводов), и считать их и только их переводами этого латинского слова.
# Помогите Васе выполнить работу по созданию латинско-английского словаря из англо-латинского.
angLat = {}
n = int(input('Введите кол-во слов: '))
for i in range(n):
    word = input('Введите слово на английском: ')
    transl = input('Введите его переводы на латынь через пробел: ')
    angLat.update({word: transl})
latAng = {}
for ang, lat in angLat.items():
    latArray = lat.split()
    for lat in latArray:
        if lat in latAng.keys():
            latAng[lat] += ", " + ang
        else:
            latAng[lat] = ang
for i in latAng:
    print(i, ': ', latAng[i])

