import os

#1
# 1. Описать процедуру Min(), возвращающую минимальное значение вводимого последовательно ряда целых положительных
# чисел N. Окончанием ввода последовательности служит значение 0. Особенностью реализации алгоритма является то,
# что ввод и вывод результатов осуществляется последовательно в основном теле программы. Процедура при этом принимает
# попарно вводимые числа их сравнивает и возвращает в основную программу минимальный результат.
def Min(a, b):
    if a < b:
        return a
    else:
        return b
n = int(input())
mn = n
while n != 0:
    mn = Min(n, mn)
    n = int(input())
print(mn)


#2
# 2. Описать процедуру Minmax(), возвращающую минимальное и максимальное значение вводимого последовательно ряда целых
# положительных чисел. Окончанием ввода последовательности служит значение 0. Особенностью реализации алгоритма является
# то, что ввод и вывод результатов осуществляется последовательно в основном теле программы.
# Процедура при этом принимает попарно вводимые числа их сравнивает и возвращает в основную
# программу минимальный и максимальный элемент.
def Minmax(x, y):
    if x < y:
        return x, y
    return y, x

n = int(input())
mn = n
mx = 0
while n != 0:
    mn, n = Minmax(n, mn)
    n, mx = Minmax(n, mx)
    n = int(input())
print(mn, mx)


#3
# 3. Описать процедуру DigitCountSum(N, K, S, P), находящую количество K цифр целого положительного числа N,
# их сумму S (N — входной) и P произведение; K, S, P — выходные параметры целого типа). С помощью этой процедуры
# найти количество и сумму цифр для каждого из пяти 2, 3, 4, 5, 10 значных целых чисел.
def DigitCountSum(N):
    S = 0; P = 1; K = 0
    while N > 0:
        S += N % 10
        P *= N % 10
        K += 1
        N = N // 10
    return K, S, P
n = int(input('Введите число N: '))
k, s, p = DigitCountSum(n)
print('Кол-во цифр = ', k)
print('Сумма цифр = ', s)
print('Произведение цифр = ', p)


#4
# 4. Описать процедуру ShiftRight(N), выполняющую правый циклический сдвиг числа N: значение N1 переходит в N2, значение
# N2 — в N3, значение Nk — в N1 (N —целое, являющиеся одновременно входным и выходным). С помощью этой процедуры
# выполнить правый циклический сдвиг для трех наборов 3, 5, 10 значных чисел.
def ShiftRight(N):
    n = str(N)
    return int(n[len(n) - 1] + n[0:len(n) - 1])
n = int(input('Введите число N: '))
print(ShiftRight(n))


#5
# 5. Описать процедуру ShiftLeft3(A, B, C), выполняющую левый циклический сдвиг: Описать процедуру ShiftLeft3(N),
# выполняющую левый циклический сдвиг: значение N1 переходит в Nk, значение N3 — в N2, значение Nk — в Nk-1 (N —целое,
# являющиеся одновременно входным и выходным). С помощью этой процедуры выполнить правый циклический сдвиг для трех
# наборов 4, 6, 11 значных чисел.
def ShiftLeft3(N):
    n = str(N)
    return int(n[1:len(n)] + n[0])
n = int(input('Введите число N: '))
print(ShiftLeft3(n))


#6
# 6. Описать функцию IsSquare(K) логического типа, возвращающую True, если целый параметр K (> 0) является квадратом
# некоторого целого числа, и False в противном случае. С ее помощью найти
# количество квадратов в наборе из 10 целых положительных чисел.
def IsSquare(K):
    return int(K**0.5) == float(K**0.5)

a = [3, 2, 16, 32, 64, 81, 9, 5, 6, 121]
count = 0
for i in range(len(a)):
    if IsSquare(a[i]):
        count += 1
print(count)


#7
# 7. Описать функцию Fact2(N) вещественного типа, вычисляющую двойной факториал: N!! = 1·3·5·…·N, если N — нечетное;
# N!! = 2·4·6·…·N, если N — четное (N > 0 — параметр целого типа; вещественное возвращаемое значение используется
# для того, чтобы избежать целочисленного переполнения при больших значениях N). С помощью этой функции найти двойные
# факториалы пяти данных целых чисел.
def Fact2(x):
    if x < 2:
        return 1
    return x * Fact2(x - 2)

a = [3, 2, 16, 32, 7]
for i in range(len(a)):
    print(Fact2(a[i]))


#8
# 8. Робот может перемещаться в четырех направлениях («С» — север, «З» — запад, «Ю» — юг, «В» — восток) и принимать три
# цифровые команды: 0 — продолжать движение, 1 — поворот налево, –1 — поворот направо. Дан символ C — исходное
# направление робота и целое число N — посланная ему команда (вводится в основной программе). Вывести направление робота
# после выполнения k-полученных команд.
def f(pos, vec, n):
    for i in range(n):
        comm = int(input("Введите команду: "))

        if comm == 0:
            pos += vec
        elif comm == 1:
            vec = [-vec[1], vec[0]]
        else:
            vec = [vec[1], -vec[0]]
    napr = ""
    delta = pos[0] + pos[1]
    if vec[0] == 1 and vec[1] == 0:
        napr = "С"
    elif vec[0] == -1 and vec[1] == 0:
        napr = "Ю"
    elif vec[0] == 0 and vec[1] == 1:
        napr = 'В'
    else:
        napr = 'З'

    print("Сдвинулся на ", abs(delta), " клеток")
    print("Направление - ", napr)
print("Задача 24:")
k = int(input("Введите число"))
c = input("Введите направление")
vec = []
if c == 'С':
    vec = [1, 0]
elif c == 'Ю':
    vec = [-1, 0]
elif c == 'В':
    vec = [0, 1]
else:
    vec = [0, -1]
f([0, 0], vec, k)


#1
# 1. Дана строка S. Если S является допустимым именем файла, то создать пустой файл с этим именем и вывести True.
# Если файл с именем S создать нельзя, то вывести False.
s = input("Введите строку: ")
f = True
for i in s:
    if i in ['\\', '/', ':', '*', '?', '"', '>', '<', '|', '+']:
        f = False
if s[len(s) - 1] == ' ':
    f = False
if f:
    f = open(s, 'w')
    f.close()
    print(True)
else:
    print(False)


#2
# 2. Дано имя файла и целое число N (> 1). Создать файл целых чисел с данным именем и записать в него N
# первых положительных четных чисел (2,4, …).
s = input('Введите строку: ')
n = int(input('Введите число N: '))
with open(s, 'w') as f:
    for i in range(n):
        f.write(str(2*(i + 1)) + '\n')

#3
# 3. Дано имя файла целых чисел. Найти количество элементов, содержащихся в данном файле. Если файла с таким именем не
# существует, то вывести –1.
s = input('Введите строку: ')
try:
    f = open(s, 'r')
    text = f.read()
    f.close()
    print(len(text.split()))
except FileNotFoundError:
    print(-1)


#4
# 4. Дан файл целых чисел, содержащий не менее четырех элементов. Вывести первый, второй,
# предпоследний и последний элементы данного файла.
with open('numbers.txt', 'r') as f:
    s = f.read()
    a = s.split()
    print(a[0], a[1], a[len(a) - 2], a[len(a) - 1])


#5
# 5. Дан файл целых чисел. Создать новый файл, содержащий те же элементы, что и исходный файл, но в обратном порядке.
f1 = open('numbers.txt', 'r')
s = f1.read()
f1.close()
p = input('Введите имя файла для записи: ')
f2 = open(p, 'w')
f2.write(s[::-1])
f2.close()


#6
# 6. Дан файл вещественных чисел. Создать два новых файла, первый из которых содержит элементы исходного
# файла с нечетными номерами (1, 3,…), а второй — с четными (2, 4, …).
f = open('numbers.txt', 'r')
s = f.read()
f.close()
s = s.split()
f1 = open('num1.txt', 'w')
f2 = open('num2.txt', 'w')
f1.write(' '.join((s[::2])))
f2.write(' '.join((s[1::2])))
f1.close()
f2.close()


#7
# 7. Дан файл вещественных чисел. Заменить в нем все элементы на их квадраты.
f = open('numbers.txt', 'r')
s = f.read()
s = s.split()
f.close()
f = open('numbers.txt', 'w')
for i in range(0, len(s)):
    f.write((str(float(s[i])**2)) + ' ')
f.close()


#8
# 8. Дан файл вещественных чисел. Поменять в нем местами минимальный и максимальный элементы.
f = open('numbers.txt', 'r')
s = f.read()
s = s.split()
f.close()
mnpos = 0
mxpos = 0
for i in range(len(s)):
    if s[mnpos] > s[i]:
        mnpos = i
    if s[mxpos] < s[i]:
        mxpos = i
s[mxpos], s[mnpos] = s[mnpos], s[mxpos]
f = open('numbers.txt', 'w')
for i in s:
    f.write(i + '  ')
f.close()



#9
# 9. Дан файл целых чисел, содержащий четное количество элементов. Удалить из данного файла вторую половину элементов.
f = open('numbers.txt', 'r')
s = f.read()
f.close()
f = open('numbers.txt', 'w')
f.write(s[:len(s)//2:])
f.close()


#10
# 10.Дан файл целых чисел. Удалить из него все элементы с четными номерами.
f = open('numbers.txt', 'r')
s = f.read()
s = s.split()
f.close()
s = s[::2]
f = open('numbers.txt', 'w')
for i in s:
    f.write(i + ' ')
f.close()

#11
# 11.Дан файл целых чисел. Удалить из него все отрицательные числа.
f = open('numbers.txt', 'r')
s = f.read()
f.close()
s = s.split()
i = 0
while i < len(s):
    if int(s[i]) < 0:
        s.pop(i)
    else:
        i += 1
f = open('numbers.txt', 'w')
for i in s:
    f.write(i + ' ')
f.close()


#12
# 12.Дан файл целых чисел. Удвоить его размер, записав в конец файла все его исходные элементы (в том же порядке).
f = open('numbers.txt', 'r')
s = f.read()
f.close()
s = s.split()
s = s + s
f = open('numbers.txt', 'w')
for i in s:
    f.write(i + ' ')
f.close()


#13
# 13.Дан файл целых чисел. Продублировать в нем все элементы с нечетными номерами.
f = open('numbers.txt', 'r')
s = f.read()
f.close()
s = s.split()
new = []
for i in range(len(s)):
    new.append(s[i])
    if i % 2 == 0:
        new.append(s[i])
f = open('numbers.txt', 'w')
for i in new:
    f.write(i + ' ')
f.close()


#14
# 14.Дан файл целых чисел. Заменить в нем каждый элемент с четным номером на два нуля.
f = open('numbers.txt', 'r')
s = f.read()
f.close()
s = s.split()
new = []
for i in range(len(s)):
    if i % 2 != 0:
        new.append('00')
    else:
        new.append(s[i])
f = open('numbers.txt', 'w')
for i in new:
    f.write(i + ' ')
f.close()


#15
# 15.Даны два файла произвольного типа. Поменять местами их содержимое.
s1 = input('Введите имя первого файла: ')
s2 = input('Введите имя второго файла: ')
f = open(s1, 'r')
ins1 = f.read()
f.close()
f = open(s2, 'r')
ins2 = f.read()
f.close()
f = open(s1, 'w')
f.write(ins2)
f.close()
f = open(s2, 'w')
f.write(ins1)
f.close()


#16
# 16.Дан файл произвольного типа. Создать его копию с новым именем.
s = input("Введите имя файла: ")
f = open(s, 'r')
ans = f.read()
f.close()
s = input("Введите новое имя файла: ")
f = open(s, 'w')
f.write(ans)
f.close()


#17
# 17.Даны три файла одного и того же типа, но разного размера. Заменить содержимое самого длинного файла на содержимое
# самого короткого.
s1 = input("Введите имя 1 файла: ")
s2 = input("Введите имя 2 файла: ")
s3 = input("Введите имя 3 файла: ")
b1 = os.path.getsize(s1)
b2 = os.path.getsize(s2)
b3 = os.path.getsize(s3)
k = max(b1, b2, b3)
l = min(b1, b2, b3)
dict = {b1: s1, b2: s2, b3: s3}
f1 = open(dict[k], 'r')
f2 = open(dict[l], 'r')
a1 = f1.read()
a2 = f2.read()
f1.close()
f2.close()
f1 = open(dict[l], 'w')
f2 = open(dict[k], 'w')
f1.write(a2)
f2.write(a1)
f1.close()
f2.close()


#18
# 18.Даны два файла одного и того же типа. Добавить к первому файлу содержимое второго файла,
# а ко второму файлу — содержимое первого.
s1 = input("Введите имя 1 файла: ")
s2 = input("Введите имя 2 файла: ")
f1 = open(s1, 'r')
f2 = open(s2, 'r')
ans1 = f1.read()
f1.close()
ans2 = f2.read()
f2.close()
tmp1 = ans1 + ans2
tmp2 = ans2 + ans1
f = open(s1, 'w')
f.write(tmp1)
f.close()
f = open(s2, 'w')
f.write(tmp2)
f.close()


#19
# 19.Дан файл целых чисел. Создать два новых файла, первый из которых содержит положительные числа из исходного файла (в
# обратном порядке), а второй — отрицательные (также в обратном порядке). Если положительные или отрицательные числа в
# исходном файле отсутствуют, то соответствующий результирующий файл оставить пустым.
print("Задача 20: ")
s = input("Введите имя файла: ")
f = open(s, 'r')
ans = f.read()
ans = ans.split()
f.close()
pros = open('pros.txt', 'w')
cons = open('cons.txt', 'w')
for i in range(len(ans), -1, -1):
    if int(ans[i]) > 0:
        pros.write(ans[i])
    if int(ans[i]) < 0:
        cons.write(ans[i])
pros.close()
cons.close()


#20
# 20.Даны два файла вещественных чисел с именами S1 и S2, элементы которых упорядочены по возрастанию.
# Объединить эти файлы в новый файл с именем S3 так, чтобы его элементы также оказались упорядоченными по возрастанию.
s1 = input("Введите имя 1 файла: ")
s2 = input("Введите имя 2 файла: ")
s3 = input("Введите имя 3 файла: ")
f1 = open(s1, 'r')
a1 = f1.read()
a1 = a1.split()
f1.close()
f2 = open(s2, 'w')
a2 = f2.read()
a2 = a2.split()
f2.close()
ans = []
i = 0
j = 0
while i < len(a1) and j < len(a2):
    if a1[i] > a2[j]:
        ans += a2[j]
        j += 1
    else:
        ans += a1[i]
        i += 1
while i < len(a1):
    ans += a1[i]
    i += 1
while j < len(a2):
    ans += a2[j]
    j += 1
f = open(s3, 'w')
for i in ans:
    f.write(i)
f.close()


#21
# 21.Дан символьный файл, содержащий по крайней мере один символ пробела. Удалить все его элементы,
# расположенные после первого символа пробела, включая и этот пробел.
s = input("Введите имя файла: ")
f = open(s, 'r')
ans = f.read()
f.close()
i = ans.find(' ')
f = open(s, 'w')
f.write(ans[:i:])
f.close()


#22
# 22.Даны имена четырех файлов. Найти количество файлов с указанными именами, которые имеются в текущем каталоге.
count = 0
for i in range(0, 4):
    print("Введите имя", i+1, "файла: ")
    s = input()
    try:
        f = open(s, 'r')
        count += 1
    except FileNotFoundError:
        continue
print(count)